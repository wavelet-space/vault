# 2022-07-15

- [x] Pročti email a odpověz na to co je možné odbavit hned, případně (GMail, ProtonMail, Outlook).
- [x] Zkontroluj, jestli nemáš otevřen nějaý pull-request.
  - ANO:
- [ ] Napiš si co budeš programovat.

## Poznámky při vývoji s Petrou

1. Přidal jsem nějaké drobnosti do modulu `common`.
   je tady modul `server.status` Tak je tkzv `enum` Status, kde jsou definované
   názvy a kódy pro HTTP status. Při každém volání má REST API pak vracet příslušný kód např. 200 je OK atd. Můžeš tak vracet teď místo čísel název a číslo se doplní třeba `Status.OK` se mapuje na `200`. V celku je to dané, ale někdy je dobré si detaily někam napsat, ne každý vrací naprosto stejné status kódy. Je to už moc detailní, ale většinou se to pak píše do style-guide.
   Dím sem odkaz: <https://restfulapi.net/http-status-codes/>
   Tak co teď?

Na to kašli.

Ok, tak jen něco k DDD. Ta kniha je dobrá, ona jde postupně a refaktoruje projekt
tak, že přidává věci.

### Rekapitulace našeho projektu z hlediska DDD

Začli jsme definováním požadavků a pojmů. Z toho nám vypadl nějaký
předběžný doménový model. Podtstatná jména josu entity a slovesa předsatvují nějaké
operace ... chování v tom systému. Máme tedy určitě třídu `Transcript`. Respektive máme
bounded context `catalog` a v něm doménový model pro _transcript_. Fyzicky tady `service.catalog`. V katalogu si žije přepis svým životem a v jiném kontextu klidné úplně jiným životem.

Viz DDD příklady, kdy máš customer v různých konetxtec

Ještě důležité je, že celá dvoje doména se dělí na subdomény.
A ty subdomény se dají dělit na _core_, _generic_ a _supporting_.
Kde _core_ je hrozně hrozně důležitá... ostatní se dají nahradit třeba nějakou aplikací třetí strany.

Potom je důležité, že v té doméně se dějí nějaké události...
v podstatě to zrcadlí ty názvy metod u `application.py`

Aplikační vrstva obsahuje kzv aplikační servicy... to jsou funkce nebo třídy co pohání tvoje _usecases_... v té knize to mají jako funkci.

Tady to mají nakreslené:

Doména neví nic o ždáném jiném modulu v projektu.
Jsou tam jen čisté třídy a funkce, žádný framework, nebo knihovna.
Čistý Python, žádné importy z jiných vrstev. U nás se jmenuje `business.py` ... protože to je business logic (layer). Někdo to pojmenuje `domain`, to je jedno.

Obsahuje jen dataclass = Value Object
Obsahuje jen enitity
Obsahuje repository, ale né konkrétní, ale jen rozhraní...
které musíš implementovat v jiné vrstvě...

Pak mám infrastrukturu. Tam jsou reálné repositories a ty používají doménový model. viz obrázek. Tady to repository nahradíš
nějakou reálnou implementací. Pro testy můžeš použít nějakou simple in-ememory. Jen musí splňovat to co definuje abstraktní
repository!

Ok, v Pythonu není interface jsko v Javě ale abstraktní třída, ale to je podobné. A od verze 3.9 je tam `Protocol`, což už je interface jako v Java.

Příklad.

```python
class AbstractTranscriptRepository:

    @abstractmethod
    def save_transcript():
        ...

class MemoryRepository(AbstractTranscriptRepository):
    @abstractmethod
    def save_transcript():
        # definujeme vlastní implementaci pomcé `dict`
        ...

class DatabaseTranscriptRepository(AbstractTranscriptRepository):
    @abstractmethod
    def save_transcript():
        # definujeme vlastní implementaci pomocí SQL
        ...
```

Tak a ted ten trik!

Máme tkzv servisní funkci a tak má něco reálného dělat v systému. Třeba use-case:
vytvoř nový přepis. Co musí ta funce dělat? Zřejme vzít nějaká data zvenku, vytvořit přepis a uložit ho do nějakého uložiště. Pokud nastane chyba tak vyhodit nějakou rozumnou výjimku/chybu. Toť vše. Ukážu ti horší a lěpší implementaci.

1. horší: Vezmem data z venku a vše uvnitř vytvoříme jak je nám zadáno.
   Říkejme tomu Kryštofova metoda. Bude fungovat! To není problém.

```python
def create_new_transcript(name: str, date: str, station: str) -> Result:

    from domain import Transcript

    # Protože data jsou z venku mohou být ve špatném tvaru. Primitivní datové typy
    # se snažíme "narvat" do doménového modelu. Musíme být připravení, že třeba name
    # je prázný řetězec.

    # Doménový model, hlavně má za úkol být v konzistětním stavu a hlídat business rules. Např. Přepis nesmí mít název kratší než jeden znak.

    # Data jdoucí z venku vždy nemusí odpovídat tomu co chceme!
    # Musíme je validovat. DOménový model se stará o svoji validaci!

    try:
        model = Transcript(name=name, date=date, station=station)
        # Musíme čekat chybu: co když data nejsou validní?

        repository = DatabaseRepository(connection="some-connection-string")

        respository.save_transcript(transcript)
        # tady opět musíme čekat chybu: co když nemlžeme uložit do DB kvůli nějakému `constraint`?

        # OK

        return Result.succes("VERY GOOD!")

    # To je jedno, někdo vrací nějaký objekt, nekdo vyhazuje výjimku
    # To je o stylu programování a o programovacím jazyku. Ve funkcionálcích vždy
    # vracíš hodnotu! Proncip je stejný: máš happy a wrong path... Railway programming.
    except ValidationError as e:
        # Model se nepodařilo vytvořit!
        return Result.failure("VERY BAD!: reason")
    except DatabaseError as e
        # Model se nepodařilo uložit!
        return Result.failure("VERY BAD!: resson...")
```

A tohle je co dělá servisní funkce: vezme data, provede co má a informuje o výsledku operace. Může buď projít nebo selhat! Nic více. Tato funkce je vstupním bodem do palikace.

Tak a teď kde je problém? Víš? Spíše s designem...

Jak bychom to testovali? Tď můžeme testovat jen proti reálné databází! ANO! Ale takto ji tam nemůžeme propašovat!

Koukni!

Řešení: Dependecy Injection! = vložení závislotí explicitně, ne ho používat uvnitř!

Dependecy Injection nebo Inversion of control je o tom, závislosti předávat jako parametr, nebo jinak¨
abychom mohli zaměnovat implementaci!

```python
def create_new_transcript(name: str, date: str, station: str, repository: AbstractRepository) -> Result:
    ...


# Volání:

create_new_transcript(name="name", date="date", station="station", repository=DatabaseTranscriptRepository)
create_new_transcript(name="name", date="date", station="station", repository=MemoryTranscriptRepository)


class FakeRepo:
    def save_transcript(self):
        print("OK")

def test_creat_new_transcript():
    fake_repository = MyFakeRepo()
    result = create_new_transcript(..., repository=MyFakerepositoryForTest) -> Result:
    assert result = "Very GOOD"

```

Takže dněšní lekce byla o tom, že musíš správně rzomístit objety v aplikaci.
Uvědomit si, do jaké vrstvy co patří a závislosti mezi nima udržovat tak, abys mohla co nejdéle
programovat oproti abstrakci a zaměnovat implementaci. Např. kvůli snadnosti testování

1. Případ: potřebuješ k testování reálnou Datbázi.
2. Případ: můžeš použít fake databázi... protože mi netestujeme repository! ale tu servisní fuknkci.

Tak a úkol pro Kryštofa byl naprogramovat TranscriptProductionRepository

ketré implementuje tyto metody, stejné jako MemoryRepository...

pak při startu aplikace jen zaměnim třídy!

Routy jsou funkce co definují operace na těch REST adresách...
Routa je volaá tu servsiní funkci mrkni.

## DDD

<https://vaadin.com/blog/ddd-part-2-tactical-domain-driven-design>
<https://www.infoq.com/articles/ddd-in-practice/>
<https://www.google.com/search?q=DDD+customer+payment+shipment&rlz=1C1GCEU_csCZ845CZ845&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjn6Zv11Pr4AhWND-wKHXR0BpsQ_AUoAXoECAEQAw&biw=2304&bih=1144&dpr=0.83#imgrc=Hm3924jTmZHz9M>

## Python Package Realeas

- Vytvoř novou větev s názvem `release-v{major}.{minor}.{patch}.
- Vytvoř nový tag.
- Zkontroluj všechny testy.
  - verze balíku v `__init__` se shoduje s verzí git tagu
  - verze balíku v README se shoduje s verzí git tagu.
  - Vše je formátováno pomocí balíku `black`.
- Pushni větev a otevři pull request.
- Začleň s pomocí squash-and-merge
- Automaticky vytvoř pomocí GA:
  - balík na PyPI nebo kontejner, relase (zip) balík na GH

<https://stackoverflow.com/questions/5195859/how-do-you-push-a-tag-to-a-remote-repository-using-git>

## VS Code

- [ ] Startuj v maximaliním režimu
- [ ] Neukzauj debilní eerro okna
